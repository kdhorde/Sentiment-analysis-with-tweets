# -*- coding: utf-8 -*-
"""Sentiment analysis with tweets

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zQqOLLUpizC83XhQZ4fUdw7phu0zNq3l

Installing kaggle Library
"""

pip install kaggle

"""Upload your kaggle.json file"""

# Create the directory
!mkdir -p ~/.kaggle

# Copy the kaggle.json file to the directory
!cp kaggle.json ~/.kaggle/

# Set file permissions
!chmod 600 ~/.kaggle/kaggle.json

"""Importing Twitter Sentiment Dataset"""

!kaggle datasets download -d kazanova/sentiment140

# extracting the compressed dataset
from zipfile import ZipFile
dataset='/content/sentiment140.zip'

with ZipFile(dataset,'r') as zip:
  zip.extractall()
  print('The dataset is extracted')

"""Importing the Dependencies"""

import numpy as np
import pandas as pd
import re
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

import nltk
nltk.download('stopwords')

# printing the stopwords in english
print(stopwords.words('english'))

"""Data Processing"""

# loading the data from csv file to pandas dataframe
twitter_data=pd.read_csv('/content/training.1600000.processed.noemoticon.csv',encoding='ISO-8859-1')

# checking the number of rows and column of dataset
twitter_data.shape # 16 lpa rows as index starts from  zero

# printing first 5 rows of data
twitter_data.head(5)

# naming the columns and reading the dataset again
column_names=['target','id','date','flag','user','text']
# loading the data from csv file to pandas dataframe
twitter_data=pd.read_csv('/content/training.1600000.processed.noemoticon.csv',names=column_names,encoding='ISO-8859-1')

twitter_data.shape

twitter_data.head()

# counting the missing values in dataset
twitter_data.isnull().sum()

# checking  the distribution of target column
twitter_data['target'].value_counts()

"""convert the target '4' to '1'"""

twitter_data.replace({'target':{4:1}},inplace=True)

# checking  the distribution of target column
twitter_data['target'].value_counts()

"""0 ->>Negtive tweet.

1 ->>positive tweet.

Stemmimg : stemming is a process of reducing a word to its root word

example : actor,actress,acting=act
"""

0 ->>Negtive tweet.

1 ->>positive tweet.

def stemming(content):
  stemmed_content=re.sub('[^a-zA-Z]',' ',content)
  stemmed_content=stemmed_content.lower()
  stemmed_content=stemmed_content.split()
  stemmed_content=[port_stem.stem(word) for word in stemmed_content if not word in stopwords.words('english')]
  stemmed_content=' '.join(stemmed_content)
  return stemmed_content

twitter_data['stemmed_content']=twitter_data['text'].apply(stemming) #it takes 50 min to excute due to large dataset

twitter_data.head()

print(twitter_data['stemmed_content'])

print(twitter_data['target'])

# separating data and label
X=twitter_data['stemmed_content'].values
Y=twitter_data['target'].values

print(X)

print(Y)

"""spliting the data into traning days and testing data"""

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,stratify=Y,random_state=2)

print(X.shape,X_train.shape,X_test.shape)

print(X_train)

print(X_test)

from sklearn.feature_extraction.text import TfidfVectorizer

# Assuming X_train and X_test contain raw text data
if isinstance(X_train, list) or isinstance(X_train, pd.Series):  # Check if X_train is raw text data
    vectorizer = TfidfVectorizer()
    X_train = vectorizer.fit_transform(X_train)  # Apply transformation only on raw text
    X_test = vectorizer.transform(X_test)
else:
    print("Data is already in sparse matrix form, no need to re-transform.")

print(X_train)

print(X_test)

"""Training the machine learning  Model

Logistic regression


"""

model=LogisticRegression(max_iter=1000)

model.fit(X_train,Y_train) #50 min wait

"""Model Evaluation

Accuracy Score
"""

# accuracy score on the  traning data
X_train_prediction=model.predict(X_train)
training_data_accuracy=accuracy_score(Y_train,X_train_prediction)

print('Accuracy score on the traning data :',training_data_accuracy)

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer

# Assuming X_train and X_test contain raw text data
if isinstance(X_train, (list, pd.Series, np.ndarray)):  # Check if X_train is raw text data
    vectorizer = TfidfVectorizer()
    X_train = vectorizer.fit_transform(X_train)  # Apply transformation only on raw text
    X_test = vectorizer.transform(X_test)
else:
    print("Data is already in sparse matrix form, no need to re-transform.")

# Step 5: Make predictions on the transformed test data
X_test_prediction = model.predict(X_test_transformed)

# Step 6: Calculate accuracy score
test_data_accuracy = accuracy_score(Y_test, X_test_prediction)
print("Test Data Accuracy:", test_data_accuracy)

"""Model accuracy = 77.8 %

Saving the trained model
"""

import pickle

filename='trained_model.sav'
pickle.dump(model, open(filename,'wb'))

"""using the saveed model for future predictions"""

# loading the saved model
loaded_model=pickle.load(open('/content/trained_model.sav','rb'))

# Extract a single sample from the test set
X_new = X_test[200]  # Directly index the numpy array
print("True Label:", Y_test[200])  # Print the true label of the sample

# Transform the single sample using the fitted vectorizer
X_new_transformed = vectorizer.transform([X_new])  # Transform as a 2D array (list containing one element)

# Predict the label for the transformed sample
prediction = loaded_model.predict(X_new_transformed)
print("Predicted Label:", prediction[0])

# Interpret the prediction
if (prediction[0] == 0):
    print('Negative Tweet')
else:
    print('Positive Tweet')

# Extract a single sample from the test set
X_new = X_test[3]  # Directly index the numpy array
print("True Label:", Y_test[3])  # Print the true label of the sample

# Transform the single sample using the fitted vectorizer
X_new_transformed = vectorizer.transform([X_new])  # Transform as a 2D array (list containing one element)

# Predict the label for the transformed sample
prediction = loaded_model.predict(X_new_transformed)
print("Predicted Label:", prediction[0])

# Interpret the prediction
if (prediction[0] == 0):
    print('Negative Tweet')
else:
    print('Positive Tweet')

# Extract a single sample from the test set
X_new = X_test[100]  # Directly index the numpy array
print("True Label:", Y_test[100])  # Print the true label of the sample

# Transform the single sample using the fitted vectorizer
X_new_transformed = vectorizer.transform([X_new])  # Transform as a 2D array (list containing one element)

# Predict the label for the transformed sample
prediction = loaded_model.predict(X_new_transformed)
print("Predicted Label:", prediction[0])

# Interpret the prediction
if (prediction[0] == 0):
    print('Negative Tweet')
else:
    print('Positive Tweet')

